{"inject_files": [{"path": "/etc/vm_monitor/send_monitor_data.py", "contents": ""}, {"path": "/etc/vm_monitor/monitor_settings.xml", "contents": "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHNlcnZpY2VzPgoJPHNlcnZpY2UgbmFtZT0iRERCIiByZXNvdXJjZV90eXBlPSdSRFMnPgoJCTxtZXRyaWMgbmFtZT0iY3B1VXNhZ2UiIHVuaXQ9IlBlcmNlbnQiLz4KCQk8bWV0cmljIG5hbWU9Im1lbVVzYWdlIiB1bml0PSJNZWdhYnl0ZXMiLz4KCQk8bWV0cmljIG5hbWU9Im5ldHdvcmtSZWNlaXZlIiB1bml0PSJLaWxvYnl0ZXMvU2Vjb25kIj4KCQkJPGFnZ3JlZ2F0aW9uIG5hbWU9IkREQihSRFNCZWxvbmdzVG8pIi8+CgkJCTxhZ2dyZWdhdGlvbiBuYW1lPSJSRFNBTEwiLz4KCQk8L21ldHJpYz4KCQk8bWV0cmljIG5hbWU9Im5ldHdvcmtUcmFuc2ZlciIgdW5pdD0iS2lsb2J5dGVzL1NlY29uZCI+CgkJCTxhZ2dyZWdhdGlvbiBuYW1lPSJEREIoUkRTQmVsb25nc1RvKSIvPgoJCQk8YWdncmVnYXRpb24gbmFtZT0iUkRTQUxMIi8+CgkJPC9tZXRyaWM+CgkJPG1ldHJpYyBuYW1lPSJkaXNrVXNhZ2UiIHVuaXQ9Ik1lZ2FieXRlcyI+CgkJCTxhZ2dyZWdhdGlvbiBuYW1lPSJEREIoUkRTQmVsb25nc1RvKSIvPgoJCQk8YWdncmVnYXRpb24gbmFtZT0iUkRTQUxMIi8+CgkJPC9tZXRyaWM+CgkJPG1ldHJpYyBuYW1lPSJkaXNrUmVhZFJlcXVlc3QiIHVuaXQ9IkNvdW50L1NlY29uZCI+CgkJCTxhZ2dyZWdhdGlvbiBuYW1lPSJEREIoUkRTQmVsb25nc1RvKSIvPgoJCQk8YWdncmVnYXRpb24gbmFtZT0iUkRTQUxMIi8+CgkJPC9tZXRyaWM+CgkJPG1ldHJpYyBuYW1lPSJkaXNrV3JpdGVSZXF1ZXN0IiB1bml0PSJDb3VudC9TZWNvbmQiPgoJCQk8YWdncmVnYXRpb24gbmFtZT0iRERCKFJEU0JlbG9uZ3NUbykiLz4KCQkJPGFnZ3JlZ2F0aW9uIG5hbWU9IlJEU0FMTCIvPgoJCTwvbWV0cmljPgoJCTxtZXRyaWMgbmFtZT0iZGlza1JlYWRSYXRlIiB1bml0PSJLaWxvYnl0ZXMvU2Vjb25kIj4KCQkJPGFnZ3JlZ2F0aW9uIG5hbWU9IkREQihSRFNCZWxvbmdzVG8pIi8+CgkJCTxhZ2dyZWdhdGlvbiBuYW1lPSJSRFNBTEwiLz4KCQk8L21ldHJpYz4KCQk8bWV0cmljIG5hbWU9ImRpc2tXcml0ZVJhdGUiIHVuaXQ9IktpbG9ieXRlcy9TZWNvbmQiPgoJCQk8YWdncmVnYXRpb24gbmFtZT0iRERCKFJEU0JlbG9uZ3NUbykiLz4KCQkJPGFnZ3JlZ2F0aW9uIG5hbWU9IlJEU0FMTCIvPgoJCTwvbWV0cmljPgoJCTxtZXRyaWMgbmFtZT0iZGlza1JlYWREZWxheSIgdW5pdD0iTWlsbGlzZWNvbmRzL0NvdW50Ij4KCQkJPGFnZ3JlZ2F0aW9uIG5hbWU9IkREQihSRFNCZWxvbmdzVG8pIi8+CgkJCTxhZ2dyZWdhdGlvbiBuYW1lPSJSRFNBTEwiLz4KCQk8L21ldHJpYz4KCQk8bWV0cmljIG5hbWU9ImRpc2tXcml0ZURlbGF5IiB1bml0PSJNaWxsaXNlY29uZHMvQ291bnQiPgoJCQk8YWdncmVnYXRpb24gbmFtZT0iRERCKFJEU0JlbG9uZ3NUbykiLz4KCQkJPGFnZ3JlZ2F0aW9uIG5hbWU9IlJEU0FMTCIvPgoJCTwvbWV0cmljPgoJCTxtZXRyaWMgbmFtZT0ibWVtVXNhZ2VSYXRlIiB1bml0PSJQZXJjZW50Ii8+Cgk8L3NlcnZpY2U+Cgk8c2VydmljZSBuYW1lPSJEREIiIHJlc291cmNlX3R5cGU9J1NRTFB4eVNlcnZlcic+CgkJPG1ldHJpYyBuYW1lPSJjcHVVc2FnZSIgdW5pdD0iUGVyY2VudCIvPgoJCTxtZXRyaWMgbmFtZT0ibWVtVXNhZ2UiIHVuaXQ9Ik1lZ2FieXRlcyIvPgoJCTxtZXRyaWMgbmFtZT0ibmV0d29ya1JlY2VpdmUiIHVuaXQ9IktpbG9ieXRlcy9TZWNvbmQiPgoJCQk8YWdncmVnYXRpb24gbmFtZT0iRERCKFNRTFB4eVNlcnZlckJlbG9uZ3NUbykiLz4KCQkJPGFnZ3JlZ2F0aW9uIG5hbWU9IlNRTFB4eVNlcnZlckFMTCIvPgoJCTwvbWV0cmljPgoJCTxtZXRyaWMgbmFtZT0ibmV0d29ya1RyYW5zZmVyIiB1bml0PSJLaWxvYnl0ZXMvU2Vjb25kIj4KCQkJPGFnZ3JlZ2F0aW9uIG5hbWU9IkREQihTUUxQeHlTZXJ2ZXJCZWxvbmdzVG8pIi8+CgkJCTxhZ2dyZWdhdGlvbiBuYW1lPSJTUUxQeHlTZXJ2ZXJBTEwiLz4KCQk8L21ldHJpYz4KCQk8bWV0cmljIG5hbWU9Im1lbVVzYWdlUmF0ZSIgdW5pdD0iUGVyY2VudCIvPgoJPC9zZXJ2aWNlPgoJPHNlcnZpY2UgbmFtZT0iRERCIiByZXNvdXJjZV90eXBlPSdNYXN0ZXInPgoJCTxtZXRyaWMgbmFtZT0iY3B1VXNhZ2UiIHVuaXQ9IlBlcmNlbnQiLz4KCQk8bWV0cmljIG5hbWU9Im1lbVVzYWdlIiB1bml0PSJNZWdhYnl0ZXMiLz4KCQk8bWV0cmljIG5hbWU9Im1lbVVzYWdlUmF0ZSIgdW5pdD0iUGVyY2VudCIvPgoJCTxtZXRyaWMgbmFtZT0ibmV0d29ya1JlY2VpdmUiIHVuaXQ9IktpbG9ieXRlcy9TZWNvbmQiLz4KCQk8bWV0cmljIG5hbWU9Im5ldHdvcmtUcmFuc2ZlciIgdW5pdD0iS2lsb2J5dGVzL1NlY29uZCIvPgoJPC9zZXJ2aWNlPgoJPHNlcnZpY2UgbmFtZT0iUkRTIiByZXNvdXJjZV90eXBlPSdSRFMnPgoJCTxtZXRyaWMgbmFtZT0iY3B1VXNhZ2UiIHVuaXQ9IlBlcmNlbnQiLz4KCQk8bWV0cmljIG5hbWU9Im1lbVVzYWdlIiB1bml0PSJNZWdhYnl0ZXMiLz4KCQk8bWV0cmljIG5hbWU9Im5ldHdvcmtSZWNlaXZlIiB1bml0PSJLaWxvYnl0ZXMvU2Vjb25kIj4KCQkJPGFnZ3JlZ2F0aW9uIG5hbWU9IlJEU0FMTCIvPgoJCTwvbWV0cmljPgoJCTxtZXRyaWMgbmFtZT0ibmV0d29ya1RyYW5zZmVyIiB1bml0PSJLaWxvYnl0ZXMvU2Vjb25kIj4KCQkJPGFnZ3JlZ2F0aW9uIG5hbWU9IlJEU0FMTCIvPgoJCTwvbWV0cmljPgoJCTxtZXRyaWMgbmFtZT0iZGlza1VzYWdlIiB1bml0PSJNZWdhYnl0ZXMiLz4KCQk8bWV0cmljIG5hbWU9ImRpc2tSZWFkUmVxdWVzdCIgdW5pdD0iQ291bnQvU2Vjb25kIi8+CgkJPG1ldHJpYyBuYW1lPSJkaXNrV3JpdGVSZXF1ZXN0IiB1bml0PSJDb3VudC9TZWNvbmQiLz4KCQk8bWV0cmljIG5hbWU9ImRpc2tSZWFkUmF0ZSIgdW5pdD0iS2lsb2J5dGVzL1NlY29uZCI+CgkJCTxhZ2dyZWdhdGlvbiBuYW1lPSJSRFNBTEwiLz4KCQk8L21ldHJpYz4KCQk8bWV0cmljIG5hbWU9ImRpc2tXcml0ZVJhdGUiIHVuaXQ9IktpbG9ieXRlcy9TZWNvbmQiPgoJCQk8YWdncmVnYXRpb24gbmFtZT0iUkRTQUxMIi8+CgkJPC9tZXRyaWM+CgkJPG1ldHJpYyBuYW1lPSJkaXNrUmVhZERlbGF5IiB1bml0PSJNaWxsaXNlY29uZHMvQ291bnQiLz4KCQk8bWV0cmljIG5hbWU9ImRpc2tXcml0ZURlbGF5IiB1bml0PSJNaWxsaXNlY29uZHMvQ291bnQiLz4KCQk8bWV0cmljIG5hbWU9ImRpc2tQYXJ0aXRpb24iIHVuaXQ9ImFsbCBwYXJ0aXRpb25zIGluZm9zIi8+CgkJPG1ldHJpYyBuYW1lPSJtZW1Vc2FnZVJhdGUiIHVuaXQ9IlBlcmNlbnQiLz4KCTwvc2VydmljZT4KCTxzZXJ2aWNlIG5hbWU9Ik5DUyIgcmVzb3VyY2VfdHlwZT0ndm0nPgoJCTxtZXRyaWMgbmFtZT0iY3B1VXNhZ2UiIHVuaXQ9IlBlcmNlbnQiLz4KCQk8bWV0cmljIG5hbWU9Im1lbVVzYWdlIiB1bml0PSJNZWdhYnl0ZXMiLz4KCQk8bWV0cmljIG5hbWU9Im5ldHdvcmtSZWNlaXZlIiB1bml0PSJLaWxvYnl0ZXMvU2Vjb25kIi8+CgkJPG1ldHJpYyBuYW1lPSJuZXR3b3JrVHJhbnNmZXIiIHVuaXQ9IktpbG9ieXRlcy9TZWNvbmQiLz4KCQk8bWV0cmljIG5hbWU9ImRpc2tVc2FnZSIgdW5pdD0iTWVnYWJ5dGVzIi8+CgkJPG1ldHJpYyBuYW1lPSJkaXNrUmVhZFJlcXVlc3QiIHVuaXQ9IkNvdW50L1NlY29uZCIvPgoJCTxtZXRyaWMgbmFtZT0iZGlza1dyaXRlUmVxdWVzdCIgdW5pdD0iQ291bnQvU2Vjb25kIi8+CgkJPG1ldHJpYyBuYW1lPSJkaXNrUmVhZFJhdGUiIHVuaXQ9IktpbG9ieXRlcy9TZWNvbmQiLz4KCQk8bWV0cmljIG5hbWU9ImRpc2tXcml0ZVJhdGUiIHVuaXQ9IktpbG9ieXRlcy9TZWNvbmQiLz4KCQk8bWV0cmljIG5hbWU9ImRpc2tSZWFkRGVsYXkiIHVuaXQ9Ik1pbGxpc2Vjb25kcy9Db3VudCIvPgoJCTxtZXRyaWMgbmFtZT0iZGlza1dyaXRlRGVsYXkiIHVuaXQ9Ik1pbGxpc2Vjb25kcy9Db3VudCIvPgoJCTxtZXRyaWMgbmFtZT0ibWVtVXNhZ2VSYXRlIiB1bml0PSJQZXJjZW50Ii8+Cgk8L3NlcnZpY2U+Cgk8c2VydmljZSBuYW1lPSJOUVMiIHJlc291cmNlX3R5cGU9J3ZtJz4KCQk8bWV0cmljIG5hbWU9ImNwdVVzYWdlIiB1bml0PSJQZXJjZW50Ii8+CgkJPG1ldHJpYyBuYW1lPSJtZW1Vc2FnZSIgdW5pdD0iTWVnYWJ5dGVzIi8+CgkJPG1ldHJpYyBuYW1lPSJuZXR3b3JrUmVjZWl2ZSIgdW5pdD0iS2lsb2J5dGVzL1NlY29uZCIvPgoJCTxtZXRyaWMgbmFtZT0ibmV0d29ya1RyYW5zZmVyIiB1bml0PSJLaWxvYnl0ZXMvU2Vjb25kIi8+CgkJPG1ldHJpYyBuYW1lPSJkaXNrVXNhZ2UiIHVuaXQ9Ik1lZ2FieXRlcyIvPgoJCTxtZXRyaWMgbmFtZT0iZGlza1JlYWRSZXF1ZXN0IiB1bml0PSJDb3VudC9TZWNvbmQiLz4KCQk8bWV0cmljIG5hbWU9ImRpc2tXcml0ZVJlcXVlc3QiIHVuaXQ9IkNvdW50L1NlY29uZCIvPgoJCTxtZXRyaWMgbmFtZT0iZGlza1JlYWRSYXRlIiB1bml0PSJLaWxvYnl0ZXMvU2Vjb25kIi8+CgkJPG1ldHJpYyBuYW1lPSJkaXNrV3JpdGVSYXRlIiB1bml0PSJLaWxvYnl0ZXMvU2Vjb25kIi8+CgkJPG1ldHJpYyBuYW1lPSJkaXNrUmVhZERlbGF5IiB1bml0PSJNaWxsaXNlY29uZHMvQ291bnQiLz4KCQk8bWV0cmljIG5hbWU9ImRpc2tXcml0ZURlbGF5IiB1bml0PSJNaWxsaXNlY29uZHMvQ291bnQiLz4KCQk8bWV0cmljIG5hbWU9ImxvYWRhdmdfNSIgdW5pdD0iUGVyY2VudCIvPgoJCTxtZXRyaWMgbmFtZT0ibWVtVXNhZ2VSYXRlIiB1bml0PSJQZXJjZW50Ii8+Cgk8L3NlcnZpY2U+Cgk8c2VydmljZSBuYW1lPSJvcGVuc3RhY2siIHJlc291cmNlX3R5cGU9J29wZW5zdGFjayc+CgkJPG1ldHJpYyBuYW1lPSJjcHVVc2FnZSIgdW5pdD0iUGVyY2VudCIvPgoJCTxtZXRyaWMgbmFtZT0ibWVtVXNhZ2UiIHVuaXQ9Ik1lZ2FieXRlcyIvPgoJCTxtZXRyaWMgbmFtZT0ibmV0d29ya1JlY2VpdmUiIHVuaXQ9IktpbG9ieXRlcy9TZWNvbmQiLz4KCQk8bWV0cmljIG5hbWU9Im5ldHdvcmtUcmFuc2ZlciIgdW5pdD0iS2lsb2J5dGVzL1NlY29uZCIvPgoJCTxtZXRyaWMgbmFtZT0iZGlza1VzYWdlIiB1bml0PSJNZWdhYnl0ZXMiLz4KCQk8bWV0cmljIG5hbWU9ImRpc2tSZWFkUmVxdWVzdCIgdW5pdD0iQ291bnQvU2Vjb25kIi8+CgkJPG1ldHJpYyBuYW1lPSJkaXNrV3JpdGVSZXF1ZXN0IiB1bml0PSJDb3VudC9TZWNvbmQiLz4KCQk8bWV0cmljIG5hbWU9ImRpc2tSZWFkUmF0ZSIgdW5pdD0iS2lsb2J5dGVzL1NlY29uZCIvPgoJCTxtZXRyaWMgbmFtZT0iZGlza1dyaXRlUmF0ZSIgdW5pdD0iS2lsb2J5dGVzL1NlY29uZCIvPgoJCTxtZXRyaWMgbmFtZT0iZGlza1JlYWREZWxheSIgdW5pdD0iTWlsbGlzZWNvbmRzL0NvdW50Ii8+CgkJPG1ldHJpYyBuYW1lPSJkaXNrV3JpdGVEZWxheSIgdW5pdD0iTWlsbGlzZWNvbmRzL0NvdW50Ii8+CgkJPG1ldHJpYyBuYW1lPSJkaXNrUGFydGl0aW9uIiB1bml0PSJhbGwgcGFydGl0aW9ucyBpbmZvcyIvPgoJCTxtZXRyaWMgbmFtZT0ibG9hZGF2Z181IiB1bml0PSJQZXJjZW50Ii8+CgkJPG1ldHJpYyBuYW1lPSJtZW1Vc2FnZVJhdGUiIHVuaXQ9IlBlcmNlbnQiLz4KCTwvc2VydmljZT4KPC9zZXJ2aWNlcz4K"}, {"path": "/etc/cron.d/inject_cron_job", "contents": "IyMjIyMgZm9yIEhBIGhlYXJ0YmVhdCAjIyMjIwojIyMjIyBwZXJpb2Q6IDEwIHNlY3MgIyMjIyMKCiMKKi8xICogKiAqICogcm9vdCBjdXJsIC1YIFBVVCAtZCAic3RhdGU9MSIgaHR0cDovLzE2OS4yNTQuMTY5LjI1NC9oZWFydGJlYXQgPiAvZGV2L251bGwgMj4mMQoqLzEgKiAqICogKiByb290IHNsZWVwIDEwOyBjdXJsIC1YIFBVVCAtZCAic3RhdGU9MSIgaHR0cDovLzE2OS4yNTQuMTY5LjI1NC9oZWFydGJlYXQgPiAvZGV2L251bGwgMj4mMQoqLzEgKiAqICogKiByb290IHNsZWVwIDIwOyBjdXJsIC1YIFBVVCAtZCAic3RhdGU9MSIgaHR0cDovLzE2OS4yNTQuMTY5LjI1NC9oZWFydGJlYXQgPiAvZGV2L251bGwgMj4mMQoqLzEgKiAqICogKiByb290IHNsZWVwIDMwOyBjdXJsIC1YIFBVVCAtZCAic3RhdGU9MSIgaHR0cDovLzE2OS4yNTQuMTY5LjI1NC9oZWFydGJlYXQgPiAvZGV2L251bGwgMj4mMQoqLzEgKiAqICogKiByb290IHNsZWVwIDQwOyBjdXJsIC1YIFBVVCAtZCAic3RhdGU9MSIgaHR0cDovLzE2OS4yNTQuMTY5LjI1NC9oZWFydGJlYXQgPiAvZGV2L251bGwgMj4mMQoqLzEgKiAqICogKiByb290IHNsZWVwIDUwOyBjdXJsIC1YIFBVVCAtZCAic3RhdGU9MSIgaHR0cDovLzE2OS4yNTQuMTY5LjI1NC9oZWFydGJlYXQgPiAvZGV2L251bGwgMj4mMQojCgojIyMjIyBmb3Igdm0gbW9uaXRvciAjIyMjIwojIyMjIyBwZXJpb2Q6IDEgbWludXRlICMjIyMjCgojCiovMSAqICogKiAqIHJvb3Qgc3UgLWMgJ3B5dGhvbiAvZXRjL3ZtX21vbml0b3Ivc2VuZF9tb25pdG9yX2RhdGEucHknID4gL2Rldi9udWxsIDI+JjEKIwoKCg=="}]}